const getBaseURL = () => {
	return new URL('.', import.meta.url);
};

class MyLogo extends HTMLElement {
    style = `
    @import url('https://fonts.googleapis.com/css2?family=Grey+Qo&display=swap');
    
    #logo {
        font-family: 'Grey Qo', cursive;
    }
    .focus-in-expand {
        -webkit-animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
                animation: focus-in-expand 0.8s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
    }
    .tracking-in-expand {
        -webkit-animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
                animation: tracking-in-expand 0.7s cubic-bezier(0.215, 0.610, 0.355, 1.000) both;
    }
    .rotate-scale-up {
        -webkit-animation: rotate-scale-up 0.65s linear both;
               animation: rotate-scale-up 0.65s linear both;
    }
    /* ----------------------------------------------
 * Generated by Animista on 2021-9-13 11:7:37
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */
#logo {
        font-size: 40px;
        border:5px solid green;
        padding-bottom : 100px;
        padding-top : 100px;
        left : px;        
    }
/**
 * ----------------------------------------
 * animation focus-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
@keyframes focus-in-expand {
  0% {
    letter-spacing: -0.5em;
    -webkit-filter: blur(12px);
            filter: blur(12px);
    opacity: 0;
  }
  100% {
    -webkit-filter: blur(0px);
            filter: blur(0px);
    opacity: 1;
  }
}
    
 * ----------------------------------------
 * animation tracking-in-expand
 * ----------------------------------------
 */
@-webkit-keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}
@keyframes tracking-in-expand {
  0% {
    letter-spacing: -0.5em;
    opacity: 0;
  }
  40% {
    opacity: 0.6;
  }
  100% {
    opacity: 1;
  }
}

/**
 * ----------------------------------------
 * animation rotate-scale-up
 * ----------------------------------------
 */
@-webkit-keyframes rotate-scale-up {
  0% {
    -webkit-transform: scale(1) rotateZ(0);
            transform: scale(1) rotateZ(0);
  }
  50% {
    -webkit-transform: scale(2) rotateZ(180deg);
            transform: scale(2) rotateZ(180deg);
  }
  100% {
    -webkit-transform: scale(1) rotateZ(360deg);
            transform: scale(1) rotateZ(360deg);
  }
}
@keyframes rotate-scale-up {
  0% {
    -webkit-transform: scale(1) rotateZ(0);
            transform: scale(1) rotateZ(0);
  }
  50% {
    -webkit-transform: scale(2) rotateZ(180deg);
            transform: scale(2) rotateZ(180deg);
  }
  100% {
    -webkit-transform: scale(1) rotateZ(360deg);
            transform: scale(1) rotateZ(360deg);
  }
}



#arial {font-family: Arial;}
#calibri{ font-family: Calibri;}
#courrier {font-family: Courier new;}
#helvetica {font-family: Helvetica;}
#times {font-family: Times New Roman;}
#papyrus {font-family: Papyrus;}
#trebuchet {font-family: Trebuchet MS;}

.Cadre{
border: 4mm ridge grey;
margin-left: 20%;
margin-right:20%;
padding-bottom : 20px;
border-radius: 10px;
}

table{
border: 30px black;
}

select option[value="1"] {
  background: "url(" + getBaseURL() + images/flammes.jpg);
}

select option[value="2"] {
  background: "url(" + getBaseURL() + images/Espace.jfif);
}
    `;
    html = `
    <br>
    <div class="Cadre">
    <table>
        <thead>
            <tr>
                <th colspan="2">Configuration</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Texte</td>
                <td><input type="text" id="selecteurTexte"></td>
            </tr>
            <tr>
                <td>Couleur du Texte </td>
                <td><input type="color" id="selecteurCouleur"></td>
            </tr>  
            <tr>
                <td>Taille du Texte</td>
                <td>5 <input type="range" val=40 min=5 max=100 id="selecteurTaille"> 100</td>
            </tr>
            <tr>
                <td>Police</td>
                <td><select name="police" id="selecteurPolice">
                    <option value="arial" id="arial">arial</option>
                    <option value="calibri" id="calibri">calibri</option>
                    <option value="courier new" id="courrier">courier new </option>
                    <option value="helvetica" id="helvetica">helvetica </option>
                    <option value="times new" id="times">times new </option>
                    <option value="papyrus" id="papyrus">papyrus </option>
                    <option value="trebuchet ms" id="trebuchet">tr&eacute;buchet ms </option> 
                 </select></td>
            </tr>
            <tr>
            <td>Background</td>
                <td><select name="back" id="selecteurBack">
                    <option value="images/flammes.jpg)" id="Feu">Flamme</option>
                    <option value="images/BlueWhite.jfif)" id="BlueWhite">BlueWhite</option>
                    <option value="images/fleche.png)" id="fleche">fleche</option>
                    <option value="images/Dame.jfif)" id="Dame">Dame</option>
                    <option value="images/Cube.jfif)" id="Cube">Cube</option>
                 
                 </select></td>
            </tr>
            <tr>
            <td>Animation</td>
                <td><select name="Anime" id="selecteurAnime">
                    <option value="focus-in-expand" id="focus-in-expand">focus-in-expand</option>
                    <option value="tracking-in-expand" id="tracking-in-expand">tracking-in-expand</option>
                    <option value="rotate-scale-up" id="rotate-scale-up">rotate-scale-up</option>
                 
                 </select></td>
           </tr>
           <tr>
            <td>Couleur du Cadre</td>
                <td><select name="Cadre" id="selecteurCadre">
                    <option value="green" id="green">Green</option>
                    <option value="blue" id="blue">Blue</option>
                    <option value="red" id="red">Red</option>
                    <option value="purple" id="purple">Purple</option>
                    <option value="black" id="black">Black</option>
                    <option value="white" id="white">White</option>

                 </select></td>
           </tr>
           <tr>
            <td>Taille du Cadre (Longueur)</td>
                <td>100 <input type="range" val=20 min=0 max=50 id="selecteurTailleCadre"> 0</td>
           </tr>
           <tr>
            <td>Taille du Cadre (Hauteur)</td>
                <td>100 <input type="range" val=0 min=0 max=25 id="selecteurTailleHautCadre"> 0</td>
           </tr>  
           <tr>
            <td>Courbe du Cadre</td>
                <td>100 <input type="range" val=0 min=0 max=25 id="selecteurCourbeCadre"> 0</td>
           </tr>    
        </tbody>  
    </table>      
    <br>
    <table>
    <button id="RestartAnime">ReStart</button>  
</table>                       
    </div>
    <br>  
        <div id="logo" >mon logo 2
    <!-- <img src="./images/flammes.jpg" width=200> -->
    </div>
                
    `;

    constructor() {
        super();
        // On crée le "shadow DOM"
        this.attachShadow({ mode: "open" });

        // récupérer les propriétés/attributs HTML
        this.couleur = this.getAttribute("couleur");
        if(!this.couleur) this.couleur = "black";

        console.log("couleur récupérée = " + this.couleur);

        this.text = this.getAttribute("text");
        this.animationClass = this.getAttribute("animation");
        this.controls = this.getAttribute("controls");
        this.size = this.getAttribute("size");
        this.police =this.getAttribute("police");
        this.cadre =this.getAttribute("cadre");
    }

    connectedCallback() {
        // ici on instancie l'interface graphique etc.
        this.shadowRoot.innerHTML = `<style>${this.style}</style>`
            + this.html;

        this.logo = this.shadowRoot.querySelector("#logo");
        // affecter les valeurs des attributs à la création
        this.logo.style.color = this.couleur;
        this.logo.classList.add(this.animationClass);
        this.fixRelativeURLs();
        this.declareEcouteurs();

        // On modifie les URLs relatifs

    }

    RestartAnime() {
        if(this.animationClass){
            this.logo.classList.toggle(this.animationClass)
            setTimeout(()=> {
                this.logo.classList.toggle(this.animationClass)
            },100)
        }
    }

    fixRelativeURLs() {
        let images = this.shadowRoot.querySelectorAll('img');
        images.forEach((e) => {
          console.log("dans le foreach")
          let imagePath = e.getAttribute('src');
            e.src = getBaseURL() + '/' + imagePath;
        });

        //console.log(getBaseURL() +  "images/flammes.jpg")
        this.logo.style.background = "url(" + getBaseURL() + "images/flammes.jpg)";

      }

    declareEcouteurs() {
        this.shadowRoot.querySelector("#RestartAnime")
            .addEventListener("click", (event) => {
                this.RestartAnime();
            });
        this.shadowRoot.querySelector("#selecteurTexte")
            .addEventListener("input", (event) => {
                this.changeTexte(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurCouleur")
            .addEventListener("input", (event) => {
                this.changeCouleur(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTaille")
            .addEventListener("input", (event) => {
                this.changeSize(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurPolice")
            .addEventListener("input", (event) => {
                this.changePolice(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurBack")
            .addEventListener("input", (event) => {
                this.changeBack(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurAnime")
            .addEventListener("input", (event) => {
                this.changeAnime(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurCadre")
            .addEventListener("input", (event) => {
                this.changeCadre(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTailleCadre")
            .addEventListener("input", (event) => {
                this.changeTailleCadre(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurTailleHautCadre")
            .addEventListener("input", (event) => {
                this.changeTailleHautCadre(event.target.value);
            });

        this.shadowRoot.querySelector("#selecteurCourbeCadre")
            .addEventListener("input", (event) => {
                this.changecourbeCadre(event.target.value);
            });
    }

    // Fonction
    changeCouleur(val) {
        this.logo.style.color = val;
    }
    changeSize(val) {
        this.logo.style.fontSize = val + "px";
    }
    changePolice(val) {
        this.logo.style.fontFamily = val;
    }
    changeBack(val) {
        this.logo.style.background = "url(" + getBaseURL() + val;
    }
    changeAnime(val) {
        this.logo.classList = val;
        this.animationClass = val;
    }
    changeCadre(val) {
        this.logo.style.border = "5px solid " + val;
    }
    changeTailleCadre(val) {
        this.logo.style.marginLeft = val + "%";
        this.logo.style.marginRight = val +"%";
    }
    changeTailleHautCadre(val) {
        this.logo.style.paddingTop = val + "%";
        this.logo.style.paddingBottom = val +"%";
    }
    changeTexte(val) {
        this.logo.textContent = val;
    }
    changecourbeCadre(val) {
        this.logo.style.borderRadius = val + "px";
    }
}

customElements.define("my-logo", MyLogo);
